import { Enum } from 'enumify';
import { List, Map } from 'immutable';

import { CONTINUE,
         SWITCHING_PROTOCOLS,
         PROCESSING,
         OK,
         CREATED,
         ACCEPTED,
         NON_AUTHORITATIVE_INFORMATION,
         NO_CONTENT,
         RESET_CONTENT,
         PARTIAL_CONTENT,
         MULTI_STATUS,
         ALREADY_REPORTED,
         IM_USED,
         MULTIPLE_CHOICES,
         MOVED_PERMANENTLY,
         FOUND,
         SEE_OTHER,
         NOT_MODIFIED,
         USE_PROXY,
         TEMPORARY_REDIRECT,
         PERMANENT_REDIRECT,
         BAD_REQUEST,
         UNAUTHORIZED,
         PAYMENT_REQUIRED,
         FORBIDDEN,
         NOT_FOUND,
         METHOD_NOT_ALLOWED,
         NOT_ACCEPTABLE,
         PROXY_AUTHENTICATION_REQUIRED,
         REQUEST_TIMEOUT,
         CONFLICT,
         GONE,
         LENGTH_REQUIRED,
         PRECONDITION_FAILED,
         PAYLOAD_TOO_LARGE,
         REQUEST_URI_TOO_LONG,
         UNSUPPORTED_MEDIA_TYPE,
         REQUESTED_RANGE_NOT_SATISFIABLE,
         EXPECTATION_FAILED,
         IM_A_TEAPOT,
         MISDIRECTED_REQUEST,
         UNPROCESSABLE_ENTITY,
         LOCKED,
         FAILED_DEPENDENCY,
         UPGRADE_REQUIRED,
         PRECONDITION_REQUIRED,
         TOO_MANY_REQUESTS,
         REQUEST_HEADER_FIELDS_TOO_LARGE,
         CONNECTION_CLOSED_WITHOUT_RESPONSE,
         UNAVAILABLE_FOR_LEGAL_REASONS,
         CLIENT_CLOSED_REQUEST,
         INTERNAL_SERVER_ERROR,
         NOT_IMPLEMENTED,
         BAD_GATEWAY,
         SERVICE_UNAVAILABLE,
         GATEWAY_TIMEOUT,
         HTTP_VERSION_NOT_SUPPORTED,
         VARIANT_ALSO_NEGOTIATES,
         INSUFFICIENT_STORAGE,
         LOOP_DETECTED,
         NOT_EXTENDED,
         NETWORK_AUTHENTICATION_REQUIRED,
         NETWORK_CONNECT_TIMEOUT_ERROR,
       } from './HttpStatus';

export default class HttpStatusFamily extends Enum {
  static getStatusFamilyMap() {
    const statusFamilyMap = {};
    HttpStatusFamily.enumValues.forEach((family) => {
      family.statuses.forEach((status) => {
        statusFamilyMap[status] = family;
      });
    });
    return Map(statusFamilyMap);
  }
}

HttpStatusFamily.initEnum({
  INFORMATIONAL: {
    statuses: List.of(
      CONTINUE,
      SWITCHING_PROTOCOLS,
      PROCESSING,
    ),
  },
  SUCCESS: {
    statuses: List.of(
      OK,
      CREATED,
      ACCEPTED,
      NON_AUTHORITATIVE_INFORMATION,
      NO_CONTENT,
      RESET_CONTENT,
      PARTIAL_CONTENT,
      MULTI_STATUS,
      ALREADY_REPORTED,
      IM_USED,
    ),
  },
  REDIRECTION: {
    statuses: List.of(
      MULTIPLE_CHOICES,
      MOVED_PERMANENTLY,
      FOUND,
      SEE_OTHER,
      NOT_MODIFIED,
      USE_PROXY,
      TEMPORARY_REDIRECT,
      PERMANENT_REDIRECT,
    ),
  },
  CLIENT_ERROR: {
    statuses: List.of(
      BAD_REQUEST,
      UNAUTHORIZED,
      PAYMENT_REQUIRED,
      FORBIDDEN,
      NOT_FOUND,
      METHOD_NOT_ALLOWED,
      NOT_ACCEPTABLE,
      PROXY_AUTHENTICATION_REQUIRED,
      REQUEST_TIMEOUT,
      CONFLICT,
      GONE,
      LENGTH_REQUIRED,
      PRECONDITION_FAILED,
      PAYLOAD_TOO_LARGE,
      REQUEST_URI_TOO_LONG,
      UNSUPPORTED_MEDIA_TYPE,
      REQUESTED_RANGE_NOT_SATISFIABLE,
      EXPECTATION_FAILED,
      IM_A_TEAPOT,
      MISDIRECTED_REQUEST,
      UNPROCESSABLE_ENTITY,
      LOCKED,
      FAILED_DEPENDENCY,
      UPGRADE_REQUIRED,
      PRECONDITION_REQUIRED,
      TOO_MANY_REQUESTS,
      REQUEST_HEADER_FIELDS_TOO_LARGE,
      CONNECTION_CLOSED_WITHOUT_RESPONSE,
      UNAVAILABLE_FOR_LEGAL_REASONS,
      CLIENT_CLOSED_REQUEST,
    ),
  },
  SERVER_ERROR: {
    statuses: List.of(
      INTERNAL_SERVER_ERROR,
      NOT_IMPLEMENTED,
      BAD_GATEWAY,
      SERVICE_UNAVAILABLE,
      GATEWAY_TIMEOUT,
      HTTP_VERSION_NOT_SUPPORTED,
      VARIANT_ALSO_NEGOTIATES,
      INSUFFICIENT_STORAGE,
      LOOP_DETECTED,
      NOT_EXTENDED,
      NETWORK_AUTHENTICATION_REQUIRED,
      NETWORK_CONNECT_TIMEOUT_ERROR,
    ),
  },
});
